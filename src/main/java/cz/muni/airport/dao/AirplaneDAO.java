package cz.muni.airport.dao;

import cz.muni.airport.model.Airplane;
import java.util.List;

/**
 * Interface of Data Access Object class that allows access to Airplane 
 * entries and Airplane related data in the database. 
 * 
 * <p> Contains basic CRUD operations.</p>
 *
 * @author Karolína Božková
 */
public interface AirplaneDAO {
    /**
     * Returns all Airplanes from the database.
     * @return List<Airplane>   Collection of Airplane objects.
     */
    public List<Airplane> getAllAirplanes();
    
    /**
     * Returns certain Airplane identified by its id.
     * If given id is not present in the database returns null.
     * 
     * @param id            Long. Unique identifier generated by database.
     * @return Airplane     Airplane object with given id or null if such entry does not exist.
     * @throws IllegalArgumentException     If id is null or not Long.
     */
    public Airplane getAirplaneById(Long id);
    
    /**
     * Returns all Airplane entries with given name. Empty List if not in the database.
     * 
     * @param name              String, name od the plane
     * @return List<Airplane>   Collection of Airplane objects with given name, empty 
     *                          collection if no such entries present.
     * @throws IllegalArgumentException     If name is null or not String.
     */
    public List<Airplane> getAirplaneByName(String name);
    
    /**
     * Adds Airplane entry to the database. Returns added entry.
     * 
     * @param airplane  Airplane. Airplane data to add.
     * @return Airplane Entry that has been added to the database.
     * @throws IllegalArgumentException If airplane is null or not Airplane object.
     */
    public Airplane addAirplane(Airplane airplane);
    
    /**
     * Updates/changes data of an entry in the database.
     * 
     * @param airplane      Airplane to modify.
     * @return  Airplane    Modified airplane.
     * @throws IllegalArgumentException     If airplane was null or not an Airplane object.
     */
    public Airplane updateAirplane(Airplane airplane);
    
    /**
     * Removes Airplane entry from the database.
     * 
     * @param airplane  Airplane to be deleted.
     * @throws IllegalArgumentException     If airplane was null or not an Airplane object.
     */
    public void removeAirplane(Airplane airplane);
    
}
