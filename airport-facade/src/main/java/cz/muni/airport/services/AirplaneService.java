package cz.muni.airport.services;

import java.util.List;

import cz.muni.airport.model.Airplane;
import cz.muni.airport.model.Flight;

/**
 * Interface of service that provides access to Airplane entries and 
 * Airplane related data.
 *
 * @author Karolína Božková, github name: Kayeeec
 */
public interface AirplaneService {
    
    /**
     * Adds Airplane entry to the database. Returns added entry.
     * 
     * @param airplane  Airplane. Airplane data to add.
     * @return Airplane Entry that has been added to the database.
     */
    Airplane saveAirplane(Airplane airplane);
    
    /**
     * Updates/changes data of an entry in the database.
     * 
     * @param airplane      Airplane to modify.
     * @return  Airplane    Modified airplane.
     */
    Airplane updateAirplane(Airplane airplane);
    
    /**
     * Removes Airplane entry from the database.
     * 
     * @param airplane  Airplane to be deleted.
     */
    void removeAirplane(Airplane airplane);
    
    /**
     * Returns all Airplanes from the database.
     * @return List<Airplane>   Collection of Airplane objects.
     */
    List<Airplane> getAllAirplanes(); 
    
    /**
     * Returns certain Airplane identified by its id.
     * If given id is not present in the database returns null.
     * 
     * @param id            Long. Unique identifier generated by database.
     * @return Airplane     Airplane object with given id or null if such entry does not exist.
     */
    Airplane getAirplaneById(Long id);
    
    /**
     * Returns all Airplane entries with given name. Empty List if not in the database.
     * 
     * @param name              String, name od the plane
     * @return List<Airplane>   Collection of Airplane objects with given name, empty 
     *                          collection if no such entries present.
     */
    List<Airplane> getAirplaneByName(String name);
    
    /**
     * This method chcecks if airplane is available for given flight.
     * @param airplane
     * @param flight    
     * @return  true if flight is available, false othervise
     */
    public boolean isAvailable(Airplane airplane, Flight flight);
    
    public List<Airplane> getAvailableAirplanes(Flight flight);
    
        
            
    
}
